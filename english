import sys
import time
import pygame
import serial

camera_pan = 0
camera_tilt = 0
camera_zoom = 0

max_pan_speed = 0x0C
max_tilt_speed = 0x0A

presets = {
   0:  (0,     0,     13374),
   1:  (4,     65301, 16704),
   2:  (0,     65376, 8999 ),
   3:  (65166, 65310, 16136),
   4:  (64594, 65272, 10488),
   5:  (0,     65474, 5058 ),
   6:  (20,    65115, 10923),
   7:  (619,   65263, 10923),
   8:  (64039, 64868, 5089 ),
   9:  (994,   65322, 14119),
   10: (484,   65336, 14615),
   11: (0,     64828, 0    )
}

hat_mappings = {
   0 : {(0, -1):1,    (-1, -1):3,   (-1,  0):3,  ( 1, -1):9,   ( 1,  0):9},
   1 : {(0,  1):0,    (-1,  0):3,   (-1, -1):4,  ( 0, -1):2,   ( 1, -1):7,   (1,  0):9},
   2 : {(0,  1):1,    (-1,  1):3,   (-1,  0):4,  (-1, -1):4,   ( 0, -1):6,   (1,  0):7,   (1, -1):7,   (1, 1):9},
   3 : {(0,  1):0,    (-1,  0):4,   (-1, -1):4,  ( 0, -1):2,   ( 1, -1):2,   (1,  0):1,   (1,  1):0},
   4 : {(0,  1):3,    (-1,  0):8,   (-1, -1):8,  ( 0, -1):8,   ( 1, -1):2,   (1,  0):2,   (1,  1):3},
   5 : {(0,  1):0,    (-1,  1):3,   (-1,  0):4,  (-1, -1):4,   ( 0, -1):1,   (1, -1):7,   (1,  0):10,  (1, 1):9},
   6 : {(0,  1):1,    (-1,  1):3,   (-1,  0):4,  (-1, -1):4,   ( 0, -1):5,   (1, -1):7,   (1,  0):7,   (1, 1):9},
   7 : {(0,  1):0,    (-1,  1):3,   (-1,  0):6,  (-1, -1):6,   ( 0, -1):5,   (1,  0):9,   (1,  1):9},
   8 : {(0,  1):3,    ( 0, -1):5,   ( 1, -1):5,  ( 1,  0):3,   ( 1,  1):3},
   9 : {(1,  0):9,    ( 0,  1):0,   (-1,  1):1,  (-1,  0):1,   (-1, -1):2,   (0, -1):7,   (1, -1):7},
   10: {(0,  1):0,    (-1,  1):3,   (-1,  0):3,  (-1, -1):4,   ( 0, -1):5,   (1, -1):7,   (1,  0):7,   (1, 1):9},
   11: {(0,  1):0,    (-1,  1):3,   (-1,  0):4,  (-1, -1):4,   ( 0, -1):2,   (1, -1):7,   (1,  0):7,   (1, 1):7}
}

ser = serial.Serial("COM4", baudrate=9600, timeout=0.1)

def send_visca(command):
    try:
        ser.reset_input_buffer()
        ser.write(command)
        time.sleep(0.05)
        response = ser.read_all()
        if response.startswith(b'\x90\x60'):
            print("[VISCA ERROR] Camera busy or invalid command.")
    except Exception as e:
        print(f"[VISCA ERROR] {str(e)}")

def inquiry_camera_position():
    global camera_pan, camera_tilt, camera_zoom
    try:
        ser.write(b'\x81\x09\x06\x12\xFF')
        time.sleep(0.08)
        resp = ser.read_all()
        if len(resp) >= 11:
            pan = (resp[2] << 12) | (resp[3] << 8) | (resp[4] << 4) | resp[5]
            tilt = (resp[6] << 12) | (resp[7] << 8) | (resp[8] << 4) | resp[9]
            camera_pan, camera_tilt = pan, tilt
        ser.write(b'\x81\x09\x04\x47\xFF')
        time.sleep(0.08)
        zoom_resp = ser.read_all()
        if len(zoom_resp) >= 7:
            zoom = (zoom_resp[2] << 12) | (zoom_resp[3] << 8) | (zoom_resp[4] << 4) | zoom_resp[5]
            camera_zoom = zoom
    except:
        pass

def set_zoom_direct(zoom_position):
    global camera_pan, camera_tilt, camera_zoom
    camera_zoom = zoom_position
    z1 = (zoom_position >> 12) & 0x0F
    z2 = (zoom_position >> 8) & 0x0F
    z3 = (zoom_position >> 4) & 0x0F
    z4 = zoom_position & 0x0F
    cmd = bytes([0x81, 0x01, 0x04, 0x47, z1, z2, z3, z4, 0xFF])
    send_visca(cmd)

def drive_pan_tilt(pan_speed, tilt_speed, pan_dir, tilt_dir):
    cmd = bytes([
        0x81, 0x01, 0x06, 0x01,
        pan_speed & 0x0F, tilt_speed & 0x0F,
        pan_dir, tilt_dir,
        0xFF
    ])
    send_visca(cmd)

def move_camera_abs(pan, tilt, pan_speed=0x09, tilt_speed=0x09):
    global camera_pan, camera_tilt
    camera_pan = pan
    camera_tilt = tilt
    p1 = (pan >> 12) & 0x0F
    p2 = (pan >> 8) & 0x0F
    p3 = (pan >> 4) & 0x0F
    p4 = pan & 0x0F
    t1 = (tilt >> 12) & 0x0F
    t2 = (tilt >> 8) & 0x0F
    t3 = (tilt >> 4) & 0x0F
    t4 = tilt & 0x0F
    cmd = bytes([
        0x81, 0x01, 0x06, 0x02,
        pan_speed & 0x0F, tilt_speed & 0x0F,
        p1, p2, p3, p4,
        t1, t2, t3, t4,
        0xFF
    ])
    send_visca(cmd)

def move_to_preset(preset_id):
    if preset_id not in presets:
        return
    global camera_pan, camera_tilt, camera_zoom
    p, t, z = presets[preset_id]
    move_camera_abs(p, t, 0x09, 0x09)
    set_zoom_direct(z)
    inquiry_camera_position()

def set_af_sensitivity_low():
    send_visca(b'\x81\x01\x04\x58\x03\xFF')

def get_closest_preset(pan, tilt, zoom):
    best_id = None
    best_dist = None
    for pid, (pp, pt, pz) in presets.items():
        pan_diff = (pp - pan)
        tilt_diff = (pt - tilt)
        zoom_diff = (pz - zoom)
        dist = (pan_diff**2) + (tilt_diff**2) + 0.02 * (zoom_diff**2)
        if best_dist is None or dist < best_dist:
            best_dist = dist
            best_id = pid
    return best_id

def main():
    global camera_pan, camera_tilt, camera_zoom
    set_af_sensitivity_low()
    pygame.init()
    pygame.joystick.init()
    joystick = pygame.joystick.Joystick(0)
    joystick.init()
    pygame.event.pump()
    initial_throttle = joystick.get_axis(2)
    throttle_normalized = (1.0 - initial_throttle) / 2.0
    initial_zoom_position = int(throttle_normalized * 0x4000)
    move_to_preset(0)
    prev_x, prev_y = 0, 0
    prev_throttle_val = initial_zoom_position
    try:
        while True:
            pygame.event.pump()
            x = joystick.get_axis(0)
            y = joystick.get_axis(1)
            throttle = joystick.get_axis(2)
            if abs(x) > 0.1:
                if x > 0.1:
                    pan_dir = 0x02
                    pan_speed = min(int(abs(x) * max_pan_speed * 1.1), max_pan_speed)
                else:
                    pan_dir = 0x01
                    pan_speed = min(int(abs(x) * max_pan_speed), max_pan_speed)
            else:
                pan_dir = 0x03
                pan_speed = 0
            if y > 0.2:
                tilt_dir = 0x02
                tilt_speed = min(int(abs(y) * max_tilt_speed), max_tilt_speed)
            elif y < -0.2:
                tilt_dir = 0x01
                tilt_speed = min(int(abs(y) * max_tilt_speed), max_tilt_speed)
            else:
                tilt_dir = 0x03
                tilt_speed = 0
            if (abs(x - prev_x) > 0.01) or (abs(y - prev_y) > 0.01):
                drive_pan_tilt(pan_speed, tilt_speed, pan_dir, tilt_dir)
                prev_x, prev_y = x, y
            throttle_normalized = (1.0 - throttle) / 2.0
            zoom_position = int(throttle_normalized * 0x4000)
            if abs(zoom_position - prev_throttle_val) > 50:
                set_zoom_direct(zoom_position)
                prev_throttle_val = zoom_position
            for btn_id in range(12):
                if joystick.get_button(btn_id):
                    move_to_preset(btn_id)
                    break
            hat_x, hat_y = joystick.get_hat(0)
            if (hat_x, hat_y) != (0, 0):
                current_preset = get_closest_preset(camera_pan, camera_tilt, camera_zoom)
                if current_preset in hat_mappings:
                    if (hat_x, hat_y) in hat_mappings[current_preset]:
                        new_preset = hat_mappings[current_preset][(hat_x, hat_y)]
                        move_to_preset(new_preset)
            inquiry_camera_position()
            time.sleep(0.05)
    except KeyboardInterrupt:
        pass
    finally:
        joystick.quit()
        pygame.quit()
        ser.close()
        sys.exit()

if __name__ == '__main__':
    main()
